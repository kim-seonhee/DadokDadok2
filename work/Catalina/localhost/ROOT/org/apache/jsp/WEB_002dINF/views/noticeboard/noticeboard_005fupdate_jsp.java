/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.96
 * Generated at: 2024-01-20 01:35:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.noticeboard;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.multi.mini6.noticeboard.vo.NoticeBoardVO;

public final class noticeboard_005fupdate_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/C:/Users/yuumi/.m2/repository/javax/servlet/jstl/1.2/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/C:/Users/yuumi/.m2/repository/javax/servlet/jstl/1.2/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1698996710949L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.multi.mini6.noticeboard.vo.NoticeBoardVO");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("    <meta content=\"width=device-width, initial-scale=1.0\" name=\"viewport\">\r\n");
      out.write("\r\n");
      out.write("    <title>Setting</title>\r\n");
      out.write("    <meta content=\"\" name=\"description\">\r\n");
      out.write("    <meta content=\"\" name=\"keywords\">\r\n");
      out.write("\r\n");
      out.write("    <!-- Favicons -->\r\n");
      out.write("    <link href=\"../../../resources/assets/img/favicon.png\" rel=\"icon\">\r\n");
      out.write("    <link href=\"../../../resources/assets/img/apple-touch-icon.png\" rel=\"apple-touch-icon\">\r\n");
      out.write("\r\n");
      out.write("    <!-- Google Fonts -->\r\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Muli:300,300i,400,400i,500,500i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i\"\r\n");
      out.write("          rel=\"stylesheet\">\r\n");
      out.write("    <!-- Vendor CSS Files -->\r\n");
      out.write("    <link href=\"../../../resources/assets/vendor/animate.css/animate.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    <link href=\"../../../resources/assets/vendor/aos/aos.css\" rel=\"stylesheet\">\r\n");
      out.write("    <link href=\"../../../resources/assets/vendor/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    <link href=\"../../../resources/assets/vendor/bootstrap-icons/bootstrap-icons.css\" rel=\"stylesheet\">\r\n");
      out.write("    <link href=\"../../../resources/assets/vendor/boxicons/css/boxicons.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    <link href=\"../../../resources/assets/vendor/glightbox/css/glightbox.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    <link href=\"../../../resources/assets/vendor/swiper/swiper-bundle.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    <link href=\"../../../resources/assets/css/style.css\" rel=\"stylesheet\">\r\n");
      out.write("    <style>\r\n");
      out.write("    .logo-link {\r\n");
      out.write("          display: flex;\r\n");
      out.write("          align-items: center;\r\n");
      out.write("          text-decoration: none; /* 링크 밑줄 제거 */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .logo-image {\r\n");
      out.write("          max-width: 300px; /* 로고 이미지 크기 조정 */\r\n");
      out.write("          height: auto; /* 이미지 높이 자동 조절 */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .logo-text {\r\n");
      out.write("          font-size: 24px; /* 로고 텍스트 크기 */\r\n");
      out.write("          font-weight: bold; /* 글씨 굵게 */\r\n");
      out.write("          color: #333; /* 글씨 색상 */\r\n");
      out.write("          /*margin-left: 5px; !* 이미지와 텍스트 간격 *!*/\r\n");
      out.write("        }\r\n");
      out.write("            .center {\r\n");
      out.write("              margin-top: 2%; /* Adjust the top margin as a percentage of the viewport height */\r\n");
      out.write("              margin-bottom: 2%; /* Adjust the bottom margin as a percentage of the viewport height */\r\n");
      out.write("              margin-left: 14%; /* Adjust the left margin as a percentage of the viewport width */\r\n");
      out.write("              margin-right: 14%; /* Adjust the right margin as a percentage of the viewport width */\r\n");
      out.write("            }\r\n");
      out.write("          </style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<!-- ======= Top Bar ======= -->\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/topbar.jsp", out, false);
      out.write("\r\n");
      out.write("<!-- End Top Bar -->\r\n");
      out.write("\r\n");
      out.write("<!-- ======= Header ======= -->\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/header.jsp", out, false);
      out.write("\r\n");
      out.write("<!-- End Header -->\r\n");
      out.write("<main id=\"main\">\r\n");
      out.write("\r\n");
      out.write("    <!-- ======= Breadcrumbs ======= -->\r\n");
      out.write("    <section id=\"breadcrumbs\" class=\"breadcrumbs\">\r\n");
      out.write("        <div class=\"container\">\r\n");
      out.write("\r\n");
      out.write("            <div class=\"d-flex justify-content-between align-items-center\">\r\n");
      out.write("                <h2>공지게시판</h2>\r\n");
      out.write("                <ol>\r\n");
      out.write("                    <li><a href=\"../mainpage/index.jsp\">Home</a></li>\r\n");
      out.write("                    <li>공지게시판</li>\r\n");
      out.write("                </ol>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    </section><!-- End Breadcrumbs -->\r\n");
      out.write("\r\n");
      out.write("<div class=\"center\">\r\n");
      out.write("    <h2>공지 수정</h2>\r\n");
      out.write("    <form action=\"/noticeboard/noticeboard_update/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${existingNotice.notc_id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" method=\"post\" enctype=\"multipart/form-data\">\r\n");
      out.write("        <div class=\"form-group\">\r\n");
      out.write("            <label for=\"notc_title\">제목</label>\r\n");
      out.write("            <input type=\"text\" class=\"form-control\" id=\"notc_title\" name=\"notc_title\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${existingNotice.notc_title}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" required>\r\n");
      out.write("        </div>\r\n");
      out.write("        <br>\r\n");
      out.write("        <div class=\"form-group\">\r\n");
      out.write("            <label for=\"notc_content\">내용</label>\r\n");
      out.write("            <textarea class=\"form-control\" id=\"notc_content\" name=\"notc_content\" rows=\"10\" required>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${existingNotice.notc_content}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</textarea>\r\n");
      out.write("        </div>\r\n");
      out.write("        ");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("        <br>\r\n");
      out.write("        <div class=\"form-group\">\r\n");
      out.write("            <label for=\"attachment\">첨부 파일</label>\r\n");
      out.write("            <input type=\"file\" class=\"form-control-file\" id=\"attachment\" name=\"file\">\r\n");
      out.write("        </div>\r\n");
      out.write("        <br>\r\n");
      out.write("            상단에 고정<input type=\"checkbox\" id=\"pinnedCheckbox\" name=\"pinnedCheckbox\" value=\"true\">\r\n");
      out.write("                    <input type=\"hidden\" id=\"pinnedHidden\" name=\"pinned\" value=\"false\">\r\n");
      out.write("        <br><br>\r\n");
      out.write("        <button type=\"submit\" class=\"btn btn-info\">수정</button>\r\n");
      out.write("        <!-- Delete button for deleting the notice -->\r\n");
      out.write("        <a href=\"#\" onclick=\"deleteNotice(");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${existingNotice.notc_id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(")\" class=\"btn btn-danger\">삭제</a>\r\n");
      out.write("        <a href=\"/noticeboard/noticeboard\" class=\"btn btn-secondary\">목록으로</a>\r\n");
      out.write("    </form>\r\n");
      out.write("\r\n");
      out.write("    </main><!-- End #main -->\r\n");
      out.write("                <!-- ======= Footer ======= -->\r\n");
      out.write("                ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/footer.jsp", out, false);
      out.write("\r\n");
      out.write("                <!-- End Footer -->\r\n");
      out.write("    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n");
      out.write("    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js\"></script>\r\n");
      out.write("    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("        function deleteNotice(notc_id) {\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                url: '/noticeboard/noticeboard_delete/' + notc_id,\r\n");
      out.write("                type: 'DELETE',\r\n");
      out.write("                success: function(result) {\r\n");
      out.write("                    // Handle success response\r\n");
      out.write("                    // For example, you can redirect to another page\r\n");
      out.write("                    window.location.href = '/noticeboard/noticeboard';\r\n");
      out.write("                },\r\n");
      out.write("                             error: function(xhr, status, error) {\r\n");
      out.write("                                 // Handle error response\r\n");
      out.write("                                 window.location.href = '/noticeboard/noticeboard';\r\n");
      out.write("                             }\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("    <script>\r\n");
      out.write("        document.getElementById('pinnedCheckbox').addEventListener('change', function() {\r\n");
      out.write("            var hiddenInput = document.getElementById('pinnedHidden');\r\n");
      out.write("            if (this.checked) {\r\n");
      out.write("                hiddenInput.value = 'true'; // Set the value to 'true' when checked\r\n");
      out.write("            } else {\r\n");
      out.write("                hiddenInput.value = 'false'; // Set the value to 'false' when unchecked\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    </script>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /WEB-INF/views/noticeboard/noticeboard_update.jsp(97,8) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty existingNotice.notice_uuid}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("            <div>\r\n");
          out.write("                <p>");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${existingNotice.notice_file_name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</p>\r\n");
          out.write("            </div>\r\n");
          out.write("        ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }
}
